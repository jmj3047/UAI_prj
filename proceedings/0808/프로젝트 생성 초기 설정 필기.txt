190726 Spring framework mvc 프로젝트 생성

1. 프로젝트 생성
-spring legacy project->spring mvc project

2. 프로젝트 기본 설정
*****복붙하는 과정에서 패키지명, 스캔범위 확인하고 수정*****
1). 라이브러리 설정
-pom.xml 상단 groupId, artifactId 정상인지 확인
-java version 설정
-reference 프로젝트에서 pom.xml 주요 라이브러리 복사 붙여넣기
-ojdbc 라이브러리 web-inf/lib 폴더에 복사 붙여넣기 ----> 오류날 시 mybatis 수행 불가
-서비스 로그 생성을 위한 aop 라이브러리 추가 확인

2). 서블렛 관련 설정
-annotation-driven 입력 확인
-정적 객체 설정 정확하게 입력.
-reference 프로젝트에서 servlet.xml 주요 내용 복사 붙여넣기
-컴포넌트 스캔 태그의 소스가 @Controller 객체를 모두 포함할 수 있도록 패키지 범위 설정
-servlet-context 파일의 맵핑 prefix, suffix 제대로 입력되었는지 확인.

3). 비즈니스 로직 및 데이터소스 관련 설정
(네임스페이스 설정: beans, context, mybatis-spring)
-reference 프로젝트에서 root.xml 주요 내용 복사 붙여넣기
-컴포넌트 스캔 태그의 소스가 @Service 객체를 모두 포함할 수 있도록 패키지 범위 설정
-mybatis 태그가 mapper 클래스가 담긴 패키지를 가르키고 있는지 확인하고 설정.
-datasource 관련 설정 확인 (db주소, 아이디, 패스워드, 호스트 이름, 포트 등..)
-서비스 로그 생성을 위한 aop 오토프록시 관련 코드 추가 확인

4). Web.xml 필터 추가
-문자인코딩 필터 추가
-기타 개발 과정에서 필요한 필터 사후 추가.

5). 설정 이후 테스트 컨트롤러 클래스 생성하여 설정 오류는 없는지 확인.

3. 패키지 및 클래스 생성
1). 패키지 생성 규칙
-com.(회사/팀명).(프로젝트명).(기능).....
-기능이 많다면 되도록 기능별로 세부적으로 설정할 것.

2). 클래스 생성
****각 기능별 클래스의 운영 원리*****
Controller <-(service 객체 주입)- Service <-(mapper(dao)객체주입)- VO
	      service interface생성	     mapper interface 생성
     주입시 service 객체 클래스 생성 필요  주입시 dao class 따로 생성하지 않음
     (단, 클래스 선언 시 interface의 메소드로 선언)
-컨트롤러/모델/서비스 등 패키지에 공통적으로 해당하는 클래스를 생성할 것.
-컨트롤러 관련 클래스: 페이지를 불러오는 Form 메소드/페이지에서 보낸 명령을 수행하는 Action 메소드로 크게 분류해서 생성.
			action 클래스는 url 일관성을 위해서 redirect 사용하여 페이지 이동.
			db 연동이 필요한 action이 존재할 경우 vo/dto와 mybatis dao 객체를 생성한 이후 작성. (생성 시 되도록 멤버변수 이름과 db 칼럼 이름을 동일하게 작성)
							    (mybatis interface에 필요한 쿼리 메소드를 작성하고 annotation 처리.)
-서비스 관련 클래스: 요청을 통해 받아온 데이터를 dao객체가 처리 하기 중간 과정을 연결해주는 각종 비즈니스 로직 클래스로 생성.
		     dao와 마찬가지로 대표 interface를 작성하고 상속받아 각종 기능을 서비스 클래스의 메소드 형태로 생성하는 쪽이 좋음.


3). 로그 기능 생성
(1).aop 라이브러리 추가(pom)
(2).aop:autoproxy 설정 (root)
(3).service 스캔범위에 로그생성 클래스 추가되도록 설정
(4).로그생성 클래스에 Service / Aspect annotation 처리
(5).포인트컷 메소드 생성 하고 포인트컷 경로 설정 (서비스 클래스를 모두 포함하도록)
(6).로그 출력 메소드 생성하고 원하는 로그 수행 annotation 추가 (매개변수 타입: ProceedingJoinPoint, 리턴타입 Object)  
    

4. Restful API/Javascript의 활용
-필수 설정: 1). 서버 컨트롤러 구현
		컨테이너 Annotation에 @ResponseBody 추가 등록.
		컨트롤러 클래스는 공통적으로 관여하는 데이터 별로 생성하는 것이 일반적 (api를 많이 사용하지 않는 프로젝트라면 1개의 restful 컨트롤러로 해결 가능)
	    2). AJAX(javascript)로 호출하여 데이터 전달받기 (XMLHttpRequest api 이용)
		가급적 JSON 타입의 데이터 형식으로 전달할 것. (var variable{ name: ooo, score: ooo }) --> 데이터의 직렬화.
	    3). ajax로 호출하여 받아온 데이터를 기반으로 javascript UI를 생성

-작동특징: method의 return값을 servlet에 미리 지정된 양식으로 포워딩하여 html 코드가 실행되는 방식이 아니라 문자열 그대로 페이지에 전달함.
	   javascript ajax로 호출 가능.
	   getter 메소드는 (is)가 붙음.--->boolean type의 변수의 이름 지을 때 주의.
	  

-활용 예: 값의 유효성 검사(회원가입 시 데이터 중복검사 기능 등....)--->데이터베이스 서버에서 유효성 검사 한번 더 실행 필요.
	  
-장점: 페이지 변경이 이뤄지지 않고도 동일 페이지에 새로운 db데이터를 불러올 수 있음.
	웹 서버 내에서 값의 유효성 변경 실행--->사용자 관점에서 실수를 1차 방지 가능.
	비동기식 통신 구현 가능 (open명령 실행 시 true/default값 입력)---->상단에 서버처리 코드를 javascript로 작성하면 해당 코드를 실행한 후 처리가 덜 끝났어도 동시에 후속 ui 코드를 실행가능.

5. 파일 업로드 기능
-필수설정:1) 파일 객체 타입: MultipartFile (복수의 파일일 경우 배열 형태로 리턴)
	  2). form 양식 수정: input-file 태그 삽입, form 양식 인코딩 타입 "multifile/form-data"로 수정
	  3). 파일명 지정: 반복문과 랜덤파일명 생성 메소드 이용 (UUID.randomUUID().toString())
	  4). 파일 저장 로직: file.transferFileTo(new FIle(루트폴더+랜덤파일명)); --> try/catch 필요 (Throwable error)
			      db쿼리를 index 증가 쿼리/만든 index를 받아서 나머지 속성값을 삽입하는 쿼리 로 나누어서 작성
	  5). xml 설정: pom.xml 관련 라이브러리(File Parser) 필요/servlet.xml에 annotation-driven, multipartResolver bean등록, 정적객체 img 태그 맵핑 추가
			servlet.xml에 <default-servlet-handler/>태그 추가 (정적객체를 입력된 맵핑에 따라 서블렛에서 처리할 수 있도록 함)

-이미지 웹 출력: /이미지폴더/이미지이름.확장자 --->해당 주소를 링크로 걸어주면 이미지 출력 가능.


6. 첨부파일 다운로드/글 내용 표시 기능
-파일 업로드 VO객체 생성: 파일 db의 컬럼값을 매개변수로 하는 vo객체 생성.
-쿼리 인터페이스 작성: select 쿼리 작성/글 인덱스를 매개변수로 하는 메소드 작성 (리턴타입 ArrayList)
-서비스 인터페이스 수정: 글 쓰기 메소드의 매개변수에 생성한 매개변수 추가 
-서비스 클래스 수정: 쿼리 객체 주입/ 글 읽기, 글 쓰기 메소드 적절하게 수정.
-UI수정: jsp 파일->글쓰기 페이지에 파일 첨부 추가
		   글읽기 페이지에 컨트롤러에서 넘어온 파라미터값을 추가.
		   출력: 이미지파일은 img 태그를 이용하여 페이지 직접 출력 가능)
		   파일 다운로드: <a href="${파일 주소 변수}">"${기본 파일명 변수}</a> 
                        	     결과) 웹브라우저에서 바로 출력할 수 없는 타입의 파일은 링크를 눌렀을 때 다운로드 형식으로 실행됨 (ex. word, exe, zip..)


7. 기타 참고사항
1). 서버 재가동시 퍼블리싱으로 인한 업로드 파일 삭제 현상 해결
-서버에 프로젝트 파일 업로드하기

2).DB 연동 오류로 인한 404 NOT FOUND 해결
-root-context.xml에서 service 스캔 태그와 범위 확인
-service annotation 확인
-root-context.xml의 mapper 스캔 태그와 범위 확인.
-autowired annotation 확인

3).insert 실행 시 부적합한 열 이름 해결
-입력 페이지의 Form 태그에서 날아온 이름명과 쿼리의 변수명 일치 확인
-어트리뷰트 도메인 제약에 날아온 값이 포함되는지 확인
-VO객체의 setter 메소드가 정상 기입되어있는지 확인.

4). 파일 미첨부시 StringIndexOutOfBoundsException 해결
-







